<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JayYu🍹</title>
  
  
  <link href="https://jayuspider.cn/atom.xml" rel="self"/>
  
  <link href="https://jayuspider.cn/"/>
  <updated>2024-01-03T08:05:45.384Z</updated>
  <id>https://jayuspider.cn/</id>
  
  <author>
    <name>JayYu🍹</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript基础--循坏</title>
    <link href="https://jayuspider.cn/152fd37efa70/"/>
    <id>https://jayuspider.cn/152fd37efa70/</id>
    <published>2024-01-03T07:47:08.134Z</published>
    <updated>2024-01-03T08:05:45.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="循环的三种形式"><a href="#循环的三种形式" class="headerlink" title="循环的三种形式"></a>循环的三种形式</h3><ul><li>1.while循环</li></ul><p>while循环的基本形式是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件) &#123;</span><br><span class="line">    语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>while循环的特点是，当条件为true时，循环体会一直执行，直到条件为false时，循环结束。</p><ul><li>2.do…while循环</li></ul><p>do…while循环的基本形式是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    语句;</span><br><span class="line">&#125; <span class="keyword">while</span>(条件);</span><br></pre></td></tr></table></figure><p>do…while循环的特点是，在循环体执行一次之后，会判断条件，如果条件为true，则继续执行循环体，否则，循环结束。</p><ul><li>3.for循环</li></ul><p>for循环的基本形式是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化; 条件; 变化) &#123;</span><br><span class="line">    语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for循环的特点是，在循环体执行一次之后，会判断条件</p><ul><li>如果条件为true，则继续执行循环体，否则，循环结束。</li><li>循环体中，初始化语句会在循环开始时执行一次，变化语句会在每次循环体执行之后执行一次。</li></ul><h3 id="循环的注意事项"><a href="#循环的注意事项" class="headerlink" title="循环的注意事项"></a>循环的注意事项</h3><ul><li>1.循环体中，初始化语句会在循环开始时执行一次，变化语句会在每次循环体执行之后执行一次。</li><li>2.循环体中，如果没有使用break语句，则会一直执行到循环结束。</li><li>3.循环体中，如果没有使用continue语句，则会一直执行到循环体的下一行。</li><li>4.循环体中，如果没有使用return语句，则会一直执行到循环体的下一行。</li><li>5.循环体中，如果没有使用throw语句，则会一直执行到循环体的下一行。</li><li>6.循环体中，如果没有使用try…catch语句，则会一直执行到循环体的下一行。</li></ul><h2 id="循环的应用"><a href="#循环的应用" class="headerlink" title="循环的应用"></a>循环的应用</h2><h3 id="1-打印1到100的整数"><a href="#1-打印1到100的整数" class="headerlink" title="1.打印1到100的整数"></a>1.打印1到100的整数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-循环的嵌套"><a href="#2-循环的嵌套" class="headerlink" title="2.循环的嵌套"></a>2.循环的嵌套</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= <span class="number">100</span>; j++) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i + <span class="string">&quot; * &quot;</span> + j + <span class="string">&quot; = &quot;</span> + i * j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-打印1到100的整数，每隔10个打印一行"><a href="#3-打印1到100的整数，每隔10个打印一行" class="headerlink" title="3.打印1到100的整数，每隔10个打印一行"></a>3.打印1到100的整数，每隔10个打印一行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do…while循环的应用"><a href="#do…while循环的应用" class="headerlink" title="do…while循环的应用"></a>do…while循环的应用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    i++;</span><br><span class="line">&#125; <span class="keyword">while</span>(i &lt;= <span class="number">100</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;循环结构&quot;&gt;&lt;a href=&quot;#循环结构&quot; class=&quot;headerlink&quot; title=&quot;循环结构&quot;&gt;&lt;/a&gt;循环结构&lt;/h2&gt;&lt;h3 id=&quot;循环的三种形式&quot;&gt;&lt;a href=&quot;#循环的三种形式&quot; class=&quot;headerlink&quot; title=&quot;循环的</summary>
      
    
    
    
    <category term="javascript基础" scheme="https://jayuspider.cn/categories/javascript%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="javascript基础" scheme="https://jayuspider.cn/tags/javascript%E5%9F%BA%E7%A1%80/"/>
    
    <category term="javascript" scheme="https://jayuspider.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>javascript基础--运算符</title>
    <link href="https://jayuspider.cn/8d442c175018/"/>
    <id>https://jayuspider.cn/8d442c175018/</id>
    <published>2023-12-29T06:24:52.817Z</published>
    <updated>2023-12-29T06:29:39.537Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><h4 id="加法运算符"><a href="#加法运算符" class="headerlink" title="加法运算符"></a>加法运算符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加法运算符</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> z = x + y;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(z); <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><h4 id="减法运算符"><a href="#减法运算符" class="headerlink" title="减法运算符"></a>减法运算符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 减法运算符</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> z = x - y;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(z); <span class="comment">// -10</span></span><br></pre></td></tr></table></figure><h4 id="乘法运算符"><a href="#乘法运算符" class="headerlink" title="乘法运算符"></a>乘法运算符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 乘法运算符</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> z = x * y;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(z); <span class="comment">// 200</span></span><br></pre></td></tr></table></figure><h4 id="除法运算符"><a href="#除法运算符" class="headerlink" title="除法运算符"></a>除法运算符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 除法运算符</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> z = x / y;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(z); <span class="comment">// 0.5</span></span><br></pre></td></tr></table></figure><h4 id="余数运算符"><a href="#余数运算符" class="headerlink" title="余数运算符"></a>余数运算符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 余数运算符</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> z = x % y;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(z); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h4 id="自增运算符"><a href="#自增运算符" class="headerlink" title="自增运算符"></a>自增运算符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自增运算符</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> y = x++;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 11</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h4 id="自减运算符"><a href="#自减运算符" class="headerlink" title="自减运算符"></a>自减运算符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自减运算符</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> y = x--;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 9   </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h2 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 逗号运算符</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> z = x + y,</span><br><span class="line">    a = <span class="number">30</span>,</span><br><span class="line">    b = <span class="number">40</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(z); <span class="comment">// 30</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 30</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 40</span></span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 赋值运算符</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">20</span>;</span><br><span class="line">x = y;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; class=&quot;headerlink&quot; title=&quot;运算符&quot;&gt;&lt;/a&gt;运算符&lt;/h2&gt;&lt;h3 id=&quot;算术运算符&quot;&gt;&lt;a href=&quot;#算术运算符&quot; class=&quot;headerlink&quot; title=&quot;算术运算符&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="javascript基础" scheme="https://jayuspider.cn/categories/javascript%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="javascript基础" scheme="https://jayuspider.cn/tags/javascript%E5%9F%BA%E7%A1%80/"/>
    
    <category term="javascript" scheme="https://jayuspider.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>python基础--元组</title>
    <link href="https://jayuspider.cn/8a8cb5b66063/"/>
    <id>https://jayuspider.cn/8a8cb5b66063/</id>
    <published>2023-12-28T05:04:48.048Z</published>
    <updated>2023-12-28T05:09:46.929Z</updated>
    
    <content type="html"><![CDATA[<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元组是Python中一种不可变序列，元组用小括号括起来，元素之间用逗号隔开。</p><p>元组的创建和使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 元组的创建</span></span><br><span class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">tuple2 = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line">tuple3 = <span class="built_in">tuple</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组的使用</span></span><br><span class="line"><span class="built_in">print</span>(tuple1[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(tuple2[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(tuple3[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h2 id="元组的运算"><a href="#元组的运算" class="headerlink" title="元组的运算"></a>元组的运算</h2><p>元组的运算和列表的运算一样，但是元组不能修改，不能添加元素，不能删除元素，只能使用索引访问元素，不能使用切片操作。</p><h2 id="元组的长度"><a href="#元组的长度" class="headerlink" title="元组的长度"></a>元组的长度</h2><p>元组的长度可以通过<code>len()</code>函数来获取。</p><h2 id="元组的遍历"><a href="#元组的遍历" class="headerlink" title="元组的遍历"></a>元组的遍历</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历元组</span></span><br><span class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tuple1:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h2 id="元组的拼接"><a href="#元组的拼接" class="headerlink" title="元组的拼接"></a>元组的拼接</h2><p>元组可以通过<code>+</code>运算符来拼接，拼接的结果是一个新的元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 元组的拼接</span></span><br><span class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">tuple2 = (<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>)</span><br><span class="line">tuple3 = tuple1 + tuple2</span><br><span class="line"><span class="built_in">print</span>(tuple3)</span><br></pre></td></tr></table></figure><h2 id="元组的重复"><a href="#元组的重复" class="headerlink" title="元组的重复"></a>元组的重复</h2><p>元组可以通过<code>*</code>运算符来重复，重复的结果是一个新的元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 元组的重复</span></span><br><span class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">tuple2 = tuple1 * <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(tuple2)</span><br></pre></td></tr></table></figure><h2 id="元组的比较"><a href="#元组的比较" class="headerlink" title="元组的比较"></a>元组的比较</h2><p>元组可以通过<code>==</code>运算符来比较，比较的结果是一个布尔值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 元组的比较</span></span><br><span class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">tuple2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple1 == tuple2)</span><br></pre></td></tr></table></figure><h2 id="元组的排序"><a href="#元组的排序" class="headerlink" title="元组的排序"></a>元组的排序</h2><p>元组可以通过<code>sorted()</code>函数来排序，排序的结果是一个新的元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 元组的排序</span></span><br><span class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">tuple2 = <span class="built_in">sorted</span>(tuple1)</span><br><span class="line"><span class="built_in">print</span>(tuple2)</span><br></pre></td></tr></table></figure><h2 id="元组的索引"><a href="#元组的索引" class="headerlink" title="元组的索引"></a>元组的索引</h2><p>元组可以通过索引来访问元素，索引从0开始。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 元组的索引</span></span><br><span class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple1[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;元组&quot;&gt;&lt;a href=&quot;#元组&quot; class=&quot;headerlink&quot; title=&quot;元组&quot;&gt;&lt;/a&gt;元组&lt;/h2&gt;&lt;p&gt;元组是Python中一种不可变序列，元组用小括号括起来，元素之间用逗号隔开。&lt;/p&gt;
&lt;p&gt;元组的创建和使用&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    <category term="python基础" scheme="https://jayuspider.cn/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="python基础" scheme="https://jayuspider.cn/tags/python%E5%9F%BA%E7%A1%80/"/>
    
    <category term="python" scheme="https://jayuspider.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>javascript基础--数据类型</title>
    <link href="https://jayuspider.cn/f7befe8eb5ce/"/>
    <id>https://jayuspider.cn/f7befe8eb5ce/</id>
    <published>2023-12-28T04:54:14.524Z</published>
    <updated>2023-12-28T05:02:38.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>JavaScript的数据类型分为两种：原始类型和引用类型。</p><h3 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a>原始类型</h3><p>原始类型是指直接存储在变量中的简单数据类型，包括：</p><ul><li>数值（Number）</li><li>字符串（String）</li><li>布尔值（Boolean）</li><li>null</li><li>undefined</li><li>Symbol</li></ul><p>原始类型的值是不可改变的，一旦创建，就无法改变。</p><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>引用类型是指通过变量来访问的对象，包括：</p><ul><li>对象（Object）</li><li>函数（Function）</li><li>数组（Array）</li><li>正则表达式（RegExp）</li><li>日期（Date）</li><li>错误对象（Error）</li><li>正则表达式（RegExp）</li></ul><p>引用类型的值是可改变的，一旦创建，可以改变。</p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h4 id="自动转换"><a href="#自动转换" class="headerlink" title="自动转换"></a>自动转换</h4><p>当进行算术运算时，如果其中一个操作数是字符串，则会将字符串转换为数值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="string">&#x27;20&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> result = num1 + num2;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><p>当进行比较运算时，如果其中一个操作数是字符串，则会将字符串转换为数值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="string">&#x27;20&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> result = num1 &gt; num2;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h4><p>使用<code>Number()</code>函数可以将字符串转换为数值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="string">&#x27;20&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title class_">Number</span>(num1) + <span class="title class_">Number</span>(num2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><p>使用<code>String()</code>函数可以将数值转换为字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="string">&#x27;20&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title class_">String</span>(num1) + <span class="title class_">String</span>(num2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 1020</span></span><br></pre></td></tr></table></figure><p>使用<code>Boolean()</code>函数可以将数值转换为布尔值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="string">&#x27;20&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title class_">Boolean</span>(num1) &amp;&amp; <span class="title class_">Boolean</span>(num2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>使用<code>parseInt()</code>函数可以将字符串转换为整数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="string">&#x27;20&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">parseInt</span>(num1) + <span class="built_in">parseInt</span>(num2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><p>使用<code>parseFloat()</code>函数可以将字符串转换为浮点数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="string">&#x27;20.5&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">parseFloat</span>(num1) + <span class="built_in">parseFloat</span>(num2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 30.5</span></span><br></pre></td></tr></table></figure><p>使用<code>eval()</code>函数可以将字符串转换为数值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="string">&#x27;20&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">eval</span>(num1) + <span class="built_in">eval</span>(num2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><p>使用<code>isNaN()</code>函数可以判断一个数值是否为非数值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="string">&#x27;20&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">isNaN</span>(num1) &amp;&amp; <span class="built_in">isNaN</span>(num2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>使用<code>isFinite()</code>函数可以判断一个数值是否为有限数值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="string">&#x27;20&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">isFinite</span>(num1) &amp;&amp; <span class="built_in">isFinite</span>(num2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>使用<code>encodeURI()</code>函数可以将字符串转换为URI编码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;http://www.baidu.com&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">encodeURI</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// http%3A%2F%2Fwww.baidu.com</span></span><br></pre></td></tr></table></figure><p>使用<code>decodeURI()</code>函数可以将URI编码转换为字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;http%3A%2F%2Fwww.baidu.com&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">decodeURI</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// http://www.baidu.com</span></span><br></pre></td></tr></table></figure><p>累了，这些就是JavaScript中常见的类型转换方法，下期继续！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;p&gt;JavaScript的数据类型分为两种：原始类型和引用类型。&lt;/p&gt;
&lt;h3 id=&quot;原始类型&quot;&gt;&lt;a href=&quot;#原始类</summary>
      
    
    
    
    <category term="javascript基础" scheme="https://jayuspider.cn/categories/javascript%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="javascript基础" scheme="https://jayuspider.cn/tags/javascript%E5%9F%BA%E7%A1%80/"/>
    
    <category term="javascript" scheme="https://jayuspider.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>javascript基础——变量</title>
    <link href="https://jayuspider.cn/5e3cdc138117/"/>
    <id>https://jayuspider.cn/5e3cdc138117/</id>
    <published>2023-12-27T07:51:10.129Z</published>
    <updated>2023-12-27T07:56:53.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量是程序中最基本的存储数据的方式，变量的定义和使用都非常简单。</p><h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><p>变量的定义可以使用var关键字来定义的，变量的定义必须在使用之前，否则会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name;</span><br></pre></td></tr></table></figure><h3 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h3><p>变量的赋值是使用等号（&#x3D;）来进行的，等号的左边是变量名，等号的右边是变量的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;tom&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="变量的类型"><a href="#变量的类型" class="headerlink" title="变量的类型"></a>变量的类型</h3><p>变量的类型可以通过typeof关键字来判断，变量的类型可以是：undefined、boolean、number、string、object、function、symbol。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> name; <span class="comment">// &#x27;string&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h3><p>变量的命名规则必须以字母开头，可以使用字母、数字、下划线（_）和中划线（-）来命名，但是不能使用保留字，变量名不能重复，变量名不能以<br>数字开头。</p><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>变量的作用域是指变量的可见范围，在javascript中，变量的作用域分为全局作用域和局部作用域。</p><p>全局作用域：在函数外定义的变量，在全局作用域中，变量可以被任何函数访问。</p><p>局部作用域：在函数中定义的变量，在局部作用域中，变量只能被该函数访问。</p><h3 id="变量的提升"><a href="#变量的提升" class="headerlink" title="变量的提升"></a>变量的提升</h3><p>在javascript中，变量的提升是指，变量可以在声明之前使用，即使声明在函数的顶部，也会提升到函数的顶部。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;tom&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(); <span class="comment">// tom</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;p&gt;变量是程序中最基本的存储数据的方式，变量的定义和使用都非常简单。&lt;/p&gt;
&lt;h3 id=&quot;变量定义&quot;&gt;&lt;a href=&quot;#变量定义&quot; cla</summary>
      
    
    
    
    <category term="javascript基础" scheme="https://jayuspider.cn/categories/javascript%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="javascript基础" scheme="https://jayuspider.cn/tags/javascript%E5%9F%BA%E7%A1%80/"/>
    
    <category term="javascript" scheme="https://jayuspider.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>python基础——操作列表</title>
    <link href="https://jayuspider.cn/e9cf280d8081/"/>
    <id>https://jayuspider.cn/e9cf280d8081/</id>
    <published>2023-12-27T07:35:43.347Z</published>
    <updated>2023-12-27T07:43:54.917Z</updated>
    
    <content type="html"><![CDATA[<h2 id="遍历整个列表"><a href="#遍历整个列表" class="headerlink" title="遍历整个列表"></a>遍历整个列表</h2><p>你经常需要遍历列表的所有元素，对每个元素执行相同的操作。例如，在游戏中，可能需要将每个界面元素平移相同的距离；<br>对于包含数的列表，可能需要对每个元素执行相同的统计运算；在网站中，可能需要显示文章列表中的每个标题。<br>如果需要对列表中的每个元素都执行相同的操作，可使用 Python 中的 for 循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list_name = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment"># 遍历整个列表</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> list_name:</span><br><span class="line">    <span class="comment"># 这里的 item 就是列表中的每个元素</span></span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><h2 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h2><p>Python 函数 range（）让你能够轻松地生成一系列的数。例如，可以像下面这样使用 range（）函数来打印 一系列的数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h2 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h2><p>列表推导式是一种简洁的写法，它允许你用一行代码来生成一个列表。<br>列表推导式的一般形式是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[表达式 for 元素 in 序列 if 条件]</span><br></pre></td></tr></table></figure><p>例如，要生成一个列表，其中包含从 1 到 10 的每个数的平方，你可以使用以下列表推导式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">squares = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>切片操作允许你从列表中提取部分元素。</p><p>例如，要提取列表中的前 5 个元素，你可以使用以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">squares = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(squares[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure><h2 id="列表方法"><a href="#列表方法" class="headerlink" title="列表方法"></a>列表方法</h2><p>列表方法是 Python 中用来操作列表的函数。</p><p>例如，要将列表中的每个元素都加 1，你可以使用以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">squares = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(squares)</span><br><span class="line">squares = [i+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> squares]</span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure><h2 id="复制列表"><a href="#复制列表" class="headerlink" title="复制列表"></a>复制列表</h2><p>你可以使用列表的复制方法来复制列表。</p><p>例如，要复制列表 squares，你可以使用以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">squares = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(squares)</span><br><span class="line">squares = squares[:]</span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure><h2 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h2><p>你可以使用列表的 sort() 方法来对列表进行排序。</p><p>例如，要对列表 squares 进行排序，你可以使用以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">squares = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(squares)</span><br><span class="line">squares.sort()</span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;遍历整个列表&quot;&gt;&lt;a href=&quot;#遍历整个列表&quot; class=&quot;headerlink&quot; title=&quot;遍历整个列表&quot;&gt;&lt;/a&gt;遍历整个列表&lt;/h2&gt;&lt;p&gt;你经常需要遍历列表的所有元素，对每个元素执行相同的操作。例如，在游戏中，可能需要将每个界面元素平移相同的距离</summary>
      
    
    
    
    <category term="python基础" scheme="https://jayuspider.cn/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="列表" scheme="https://jayuspider.cn/tags/%E5%88%97%E8%A1%A8/"/>
    
    <category term="python" scheme="https://jayuspider.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python基础——列表02</title>
    <link href="https://jayuspider.cn/c222d7a2ffba/"/>
    <id>https://jayuspider.cn/c222d7a2ffba/</id>
    <published>2023-12-26T09:24:33.759Z</published>
    <updated>2023-12-26T09:47:43.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从列表中删除元素"><a href="#从列表中删除元素" class="headerlink" title="从列表中删除元素"></a>从列表中删除元素</h2><p>你经常需要从列表中删除一个或多个元素。例如，玩家将一个外星人消灭后，你很可能要将其从存活的外星人列表中删除；<br>当用户在你创建的 Web 应用程序中注销账户时，你需要将该用户从活动用户列表中删除。你可以根据位置或值来删除列表中的元素。</p><h2 id="使用-del-语句删除元素"><a href="#使用-del-语句删除元素" class="headerlink" title="使用 del 语句删除元素"></a>使用 del 语句删除元素</h2><p>如果知道要删除的元素在列表中的位置，可使用 del 语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure><p>这里使用 del 语句删除了列表 motorcycles 中的第一个元素 ‘honda’：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span><br><span class="line">[&#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span><br></pre></td></tr></table></figure><p>使用 del 可删除任意位置的列表元素，只需要知道其索引即可。例如，下面演示了如何删除列表 motorcycles 中的第二个元素 ‘yamaha’：”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">“motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure><p>下面的输出表明，已经将第二款摩托车从列表中删除了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span><br><span class="line">[&#x27;honda&#x27;, &#x27;suzuki&#x27;]</span><br></pre></td></tr></table></figure><p>在这两个示例中，使用 del 语句将值从列表中删除后，你就无法再访问它了</p><h2 id="使用-pop-方法删除元素"><a href="#使用-pop-方法删除元素" class="headerlink" title="使用 pop() 方法删除元素"></a>使用 pop() 方法删除元素</h2><p>pop() 方法删除列表末尾的元素，并让你能够接着使用它。术语弹出（pop）源自这样的类比：列表就像一个栈，而删除列表末尾的元素相当于弹出栈顶元素。<br>下面来从列表 motorcycles 中弹出一款摩托车：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">❶ motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line">  <span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line">❷ popped_motorcycle = motorcycles.pop()</span><br><span class="line">❸ <span class="built_in">print</span>(motorcycles)</span><br><span class="line">❹ <span class="built_in">print</span>(popped_motorcycle)</span><br></pre></td></tr></table></figure><p>首先定义并打印了列表 motorcycles（见❶）。接下来，从这个列表中弹出一个值，并将其赋给变量 popped_motorcycle（见❷）<br>然后打印这个列表，以核实从中删除了一个值（见❸）。最后打印弹出的值，以证明依然能够访问被删除的值（见❹）。<br>输出表明，列表末尾的值 ‘suzuki’ 已删除，它现在被赋给了变量 popped_motorcycle：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span><br><span class="line">[&#x27;honda&#x27;, &#x27;yamaha&#x27;]</span><br><span class="line">suzuki”</span><br></pre></td></tr></table></figure><h2 id="删除列表中任意位置的元素"><a href="#删除列表中任意位置的元素" class="headerlink" title="删除列表中任意位置的元素"></a>删除列表中任意位置的元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">实际上，也可以使用 pop() 删除列表中任意位置的元素，只需要在括号中指定要删除的元素的索引即可。</span><br><span class="line"></span><br><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"></span><br><span class="line">first_owned = motorcycles.pop(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;The first motorcycle I owned was a <span class="subst">&#123;first_owned.title()&#125;</span>.&quot;</span>)</span><br></pre></td></tr></table></figure><p>首先弹出列表中的第一款摩托车，然后打印一条有关这辆摩托车的消息。输出是一个简单的句子，描述了我购买的第一辆摩托车：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The first motorcycle I owned was a Honda.</span><br></pre></td></tr></table></figure><p>别忘了，每当你使用 pop() 时，被弹出的元素就不再在列表中了。</p><h2 id="根据值删除元素"><a href="#根据值删除元素" class="headerlink" title="根据值删除元素"></a>根据值删除元素</h2><p>有时候，你不知道要从列表中删除的值在哪个位置。如果只知道要删除的元素的值，可使用 remove() 方法。<br>假设要从列表 motorcycles 中删除值 ‘ducati’：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>, <span class="string">&#x27;ducati&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line">motorcycles.remove(<span class="string">&#x27;ducati&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure><p>remove() 方法让 Python 确定 ‘ducati’ 出现在列表的什么地方，并将该元素删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;, &#x27;ducati&#x27;]</span><br><span class="line">[&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]”</span><br></pre></td></tr></table></figure><h2 id="使用-sort-方法对列表进行永久排序"><a href="#使用-sort-方法对列表进行永久排序" class="headerlink" title="使用 sort() 方法对列表进行永久排序"></a>使用 sort() 方法对列表进行永久排序</h2><p>Python 方法 sort() 让你能够较为轻松地对列表进行排序。假设你有一个汽车列表，并要让其中的汽车按字母顺序排列。<br>为了简化这项任务，假设该列表中的所有值都是全小写的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line">cars.sort()</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure><p>sort() 方法能永久地修改列表元素的排列顺序。现在，汽车是按字母顺序排列的，再也无法恢复到原来的排列顺序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;audi&#x27;, &#x27;bmw&#x27;, &#x27;subaru&#x27;, &#x27;toyota&#x27;]</span><br></pre></td></tr></table></figure><p>还可以按与字母顺序相反的顺序排列列表元素，只需向 sort() 方法传递参数 reverse&#x3D;True 即可。<br>下面的示例将汽车列表按与字母顺序相反的顺序排列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line">cars.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure><p>同样，对列表元素排列顺序的修改也是永久的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;toyota&#x27;, &#x27;subaru&#x27;, &#x27;bmw&#x27;, &#x27;audi&#x27;]</span><br></pre></td></tr></table></figure><h2 id="使用-sorted-函数对列表进行临时排序"><a href="#使用-sorted-函数对列表进行临时排序" class="headerlink" title="使用 sorted() 函数对列表进行临时排序"></a>使用 sorted() 函数对列表进行临时排序</h2><p>要保留列表元素原来的排列顺序，并以特定的顺序呈现它们，可使用 sorted() 函数。<br>sorted() 函数让你能够按特定顺序显示列表元素，同时不影响它们在列表中的排列顺序。<br>下面尝试对汽车列表调用这个函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"></span><br><span class="line">❶ <span class="built_in">print</span>(<span class="string">&quot;Here is the original list:&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(cars)</span><br><span class="line"></span><br><span class="line">❷ <span class="built_in">print</span>(<span class="string">&quot;\nHere is the sorted list:&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">sorted</span>(cars))</span><br><span class="line"></span><br><span class="line">❸ <span class="built_in">print</span>(<span class="string">&quot;\nHere is the original list again:&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure><p>首先按原始顺序打印列表（见❶），再按字母顺序显示该列表（见❷）。以特定顺序显示列表后进行核实，确认列表元素的排列顺序与以前相同（见❸）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Here <span class="keyword">is</span> the original <span class="built_in">list</span>:</span><br><span class="line">  [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  Here <span class="keyword">is</span> the <span class="built_in">sorted</span> <span class="built_in">list</span>:</span><br><span class="line">  [<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>]</span><br><span class="line"></span><br><span class="line">❶ Here <span class="keyword">is</span> the original <span class="built_in">list</span> again:</span><br><span class="line">  [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>]</span><br></pre></td></tr></table></figure><p>注意，在调用 sorted() 函数后，列表元素的排列顺序并没有变（见❶）。如果要按与字母顺序相反的顺序显示列表，也可向 sorted() 函数传递参数 reverse&#x3D;True。</p><h2 id="确定列表的长度"><a href="#确定列表的长度" class="headerlink" title="确定列表的长度"></a>确定列表的长度</h2><p>使用 len() 函数可快速获悉列表的长度。在下面的示例中，列表包含 4 个元素，因此其长度为 4：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"> <span class="built_in">len</span>(cars)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;从列表中删除元素&quot;&gt;&lt;a href=&quot;#从列表中删除元素&quot; class=&quot;headerlink&quot; title=&quot;从列表中删除元素&quot;&gt;&lt;/a&gt;从列表中删除元素&lt;/h2&gt;&lt;p&gt;你经常需要从列表中删除一个或多个元素。例如，玩家将一个外星人消灭后，你很可能要将其从存活的外</summary>
      
    
    
    
    <category term="python基础" scheme="https://jayuspider.cn/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="列表" scheme="https://jayuspider.cn/tags/%E5%88%97%E8%A1%A8/"/>
    
    <category term="python" scheme="https://jayuspider.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python基础——列表01</title>
    <link href="https://jayuspider.cn/4a768a49b0af/"/>
    <id>https://jayuspider.cn/4a768a49b0af/</id>
    <published>2023-12-25T07:53:21.931Z</published>
    <updated>2023-12-25T08:23:55.238Z</updated>
    
    <content type="html"><![CDATA[<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>“列表（list）由一系列按特定顺序排列的元素组成。你不仅可以创建包含字母表中所有字母、数字 0～9 或所有家庭成员姓名的列表，还可以将任何东西加入列表，其中的元素之间可以没有任何关系。列表通常包含多个元素，因此给列表指定一个表示复数的名称（如 letters、digits 或 names）是个不错的主意。<br>在 Python 中，用方括号（[]）表示列表，用逗号分隔其中的元素。下面是一个简单的示例，其中包含几种自行车：<br>”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles)</span><br></pre></td></tr></table></figure><p>如果让 Python 将列表打印出来，Python 将打印列表的内部表示，包括方括号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br></pre></td></tr></table></figure><p>鉴于这不是你要让用户看到的输出，下面来学习如何访问列表元素。</p><h2 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h2><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p>列表是有序集合，因此要访问列表的任何元素，只需将该元素的位置（索引）告诉 Python 即可。要访问列表元素，可指出列表的名称，再指出元素的索引，并将后者放在方括号内。<br>例如，下面的代码从列表 bicycles 中提取第一款自行车：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>当你请求获取列表元素时，Python 只返回该元素，而不包括方括号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trek</span><br></pre></td></tr></table></figure><p>这正是你要让用户看到的结果——整洁、干净的输出。<br>你还可以对任意列表元素调用第 2 章介绍的字符串方法。例如，可使用 title() 方法让元素 ‘trek’ 的格式更标准：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>].title())</span><br></pre></td></tr></table></figure><p>这个示例的输出与前一个示例相同，只是首字母 T 是大写的。</p><h2 id="索引从-0-而不是-1-开始"><a href="#索引从-0-而不是-1-开始" class="headerlink" title="索引从 0 而不是 1 开始"></a>索引从 0 而不是 1 开始</h2><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><p>在 Python 中，第一个列表元素的索引为 0，而不是 1。大多数编程语言是如此规定的，这与列表操作的底层实现有关<br>第二个列表元素的索引为 1。根据这种简单的计数方式，要访问列表的任何元素，都可将其位置减 1，并将结果作为索引。例如，要访问第四个列表元素，可使用索引 3。<br>下面的代码访问索引 1 和索引 3 处的自行车：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>这些代码返回列表中的第二个和第四个元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cannondale</span><br><span class="line">specialized</span><br></pre></td></tr></table></figure><p>Python 为访问最后一个列表元素提供了一种特殊语法。通过将索引指定为 -1，可让 Python 返回最后一个列表元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicyles[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>这些代码返回 ‘specialized’。这种语法很有用，因为你经常需要在不知道列表长度的情况下访问最后的元素。<br>这种约定也适用于其他负数索引，例如，索引 -2 返回倒数第二个列表元素，索引 -3 返回倒数第三个列表元素，依此类推。</p><h2 id="使用列表中的各个值"><a href="#使用列表中的各个值" class="headerlink" title="使用列表中的各个值"></a>使用列表中的各个值</h2><h3 id="-3"><a href="#-3" class="headerlink" title=""></a></h3><p>你可以像使用其他变量一样使用列表中的各个值。例如，可以使用 f 字符串根据列表中的值来创建消息。<br>下面尝试从列表中提取第一款自行车，并使用这个值创建一条消息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line">message = <span class="string">f&quot;My first bicycle was a <span class="subst">&#123;bicycles[<span class="number">0</span>].title()&#125;</span>.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><p>这里使用 bicycles[0] 的值生成了一个句子，并将其赋给变量 message。输出是一个简单的句子，其中包含列表中的第一款自行车：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My first bicycle was a Trek.</span><br></pre></td></tr></table></figure><h2 id="修改列表元素"><a href="#修改列表元素" class="headerlink" title="修改列表元素"></a>修改列表元素</h2><h3 id="-4"><a href="#-4" class="headerlink" title=""></a></h3><p>修改列表元素的语法与访问列表元素的语法类似。要修改列表元素，可指定列表名和要修改的元素的索引，再指定该元素的新值。<br>假设有一个摩托车列表，其中的第一个元素为 ‘honda’，那么可在创建列表后修改这个元素的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line">motorcycles[<span class="number">0</span>] = <span class="string">&#x27;ducati&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure><p>首先定义列表 motorcycles，其中的第一个元素为 ‘honda’。接下来，将第一个元素的值改为 ‘ducati’。<br>输出表明，第一个元素的值变了，但其他列表元素的值没变：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span><br><span class="line">[&#x27;ducati&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span><br></pre></td></tr></table></figure><p>你可以修改任意列表元素的值，而不只是第一个元素的值。</p><h2 id="在列表中添加元素"><a href="#在列表中添加元素" class="headerlink" title="在列表中添加元素"></a>在列表中添加元素</h2><h3 id="在列表末尾添加元素"><a href="#在列表末尾添加元素" class="headerlink" title="在列表末尾添加元素"></a>在列表末尾添加元素</h3><p>在列表中添加新元素时，最简单的方式是将元素追加（append）到列表末尾。继续使用前一个示例中的列表，在其末尾添加新元素 ‘ducati’：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span><br><span class="line">print(motorcycles)</span><br><span class="line"></span><br><span class="line">motorcycles.append(&#x27;ducati&#x27;)</span><br><span class="line">print(motorcycles)</span><br></pre></td></tr></table></figure><p>append() 方法将元素 ‘ducati’ 添加到列表末尾，而不影响列表中的其他所有元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span><br><span class="line">[&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;, &#x27;ducati&#x27;]</span><br></pre></td></tr></table></figure><p>append() 方法让动态地创建列表易如反掌。例如，你可以先创建一个空列表，再使用一系列函数调用 append() 添加元素。<br>下面来创建一个空列表，再在其中添加元素 ‘honda’、’yamaha’ 和 ‘suzuki’：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">motorcycles = []</span><br><span class="line"></span><br><span class="line">motorcycles.append(&#x27;honda&#x27;)</span><br><span class="line">motorcycles.append(&#x27;yamaha&#x27;)</span><br><span class="line">motorcycles.append(&#x27;suzuki&#x27;)</span><br><span class="line"></span><br><span class="line">print(motorcycles)</span><br></pre></td></tr></table></figure><p>最终的列表与前述示例中的列表完全相同：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span><br></pre></td></tr></table></figure><p>这种创建列表的方式极其常见，因为经常要等程序运行后，你才知道用户要在程序中存储哪些数据。<br>为了便于管理，可首先创建一个空列表， 用于存储用户将要输入的值，然后将用户提供的每个新值追加到列表末尾。</p><h2 id="在列表中插入元素"><a href="#在列表中插入元素" class="headerlink" title="在列表中插入元素"></a>在列表中插入元素</h2><h3 id="-5"><a href="#-5" class="headerlink" title=""></a></h3><p>使用 insert() 方法可在列表的任意位置添加新元素。为此，需要指定新元素的索引和值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span><br><span class="line"></span><br><span class="line">motorcycles.insert(0, &#x27;ducati&#x27;)</span><br><span class="line">print(motorcycles)</span><br></pre></td></tr></table></figure><p>在这个示例中，值 ‘ducati’ 被插入到了列表开头。insert() 方法在索引 0 处添加空间，并将值 ‘ducati’ 存储到这个地方：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;ducati&#x27;, &#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span><br></pre></td></tr></table></figure><p>这种操作将列表中的每个既有元素都右移一个位置。</p><h3 id="累了，下期再继续—Waiting"><a href="#累了，下期再继续—Waiting" class="headerlink" title="累了，下期再继续—Waiting"></a>累了，下期再继续—Waiting</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h2&gt;&lt;h3 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;“列表（list）由一</summary>
      
    
    
    
    <category term="python基础" scheme="https://jayuspider.cn/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="python基础" scheme="https://jayuspider.cn/tags/python%E5%9F%BA%E7%A1%80/"/>
    
    <category term="列表" scheme="https://jayuspider.cn/tags/%E5%88%97%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>python基础——变量与数据类型</title>
    <link href="https://jayuspider.cn/71dd4825c55a/"/>
    <id>https://jayuspider.cn/71dd4825c55a/</id>
    <published>2023-12-25T07:21:26.974Z</published>
    <updated>2023-12-25T08:23:55.235Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章：基础语法"><a href="#第一章：基础语法" class="headerlink" title="第一章：基础语法"></a>第一章：基础语法</h2><p>输出相关：</p><p>基本输出案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;HelloWorld&quot;</span>)</span><br></pre></td></tr></table></figure><p>HelloWorld</p><p>转义字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ name = <span class="string">&#x27;c:\\user&#x27;</span></span><br></pre></td></tr></table></figure><p>x &#x3D; ‘路径c:\user’</p><p>y &#x3D; r”路径c:\user”</p><p>z &#x3D; f”路径{name}”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">print</span>(x,<span class="string">&quot;\n&quot;</span>,y,<span class="string">&quot;\n&quot;</span>,z)</span><br></pre></td></tr></table></figure><p>路径c:\user </p><p>占位符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">17</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的年龄是：%d岁&quot;</span>%age)</span><br></pre></td></tr></table></figure><p>我的年龄是：17岁</p><p>间隔符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;www&quot;</span>, <span class="string">&quot;baidu&quot;</span>, <span class="string">&quot;com&quot;</span>, sep = <span class="string">&quot;.&quot;</span>)</span><br></pre></td></tr></table></figure><p><a href="http://www.baidu.com/">www.baidu.com</a></p><p>控制符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>, end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;world&quot;</span>)</span><br></pre></td></tr></table></figure><p>helloworld</p><p>连接符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;World&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span> + name)</span><br></pre></td></tr></table></figure><p>HelloWorld</p><p>复制符</p><p>count &#x3D; “num “</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">print</span>(count*<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>num num num </p><p>进制转换<br>x &#x3D; 100</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(x)) <span class="comment">#转换为二进制</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">oct</span>(x)) <span class="comment">#转换为八进制</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(x)) <span class="comment">#转换为16进制</span></span><br></pre></td></tr></table></figure><p>0b1100100</p><p>0o144</p><p>0x64</p><p>去除&#x2F;替换指定字符</p><p>a &#x3D; “abcd”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a.strip(<span class="string">&quot;dc&quot;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a.replace(<span class="string">&#x27;ab&#x27;</span>,<span class="string">&#x27;-&#x27;</span>))</span><br></pre></td></tr></table></figure><p>ab<br>-cd</p><p>切割字符串<br>a &#x3D; “ab_cd”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a.split(<span class="string">&quot;_&quot;</span>)[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a.split(<span class="string">&quot;_&quot;</span>)[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>ab<br>cd</p><p>format<br>x &#x3D; “我是{name}，今年{age}”.format(name &#x3D; ‘cjl’, age &#x3D; 18)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p>我是cjl，今年18</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>输入相关：</p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p>基础输入案例<br>password &#x3D; input(“请输入密码：”)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你输入的密码是：&quot;</span>, password)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(password))</span><br></pre></td></tr></table></figure><p>请输入密码：666</p><p>你输入的密码是： 666</p><p>&lt;class ‘str’&gt;</p><p>input默认输入后的类型为字符串<br>输入后类型强转<br>password &#x3D; int(input(“请输入密码：”))</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你输入的密码是：&quot;</span>, password)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(password))</span><br></pre></td></tr></table></figure><p>请输入密码：666<br>你输入的密码是： 666<br>&lt;class ‘int’&gt;</p><h2 id="运算符相关："><a href="#运算符相关：" class="headerlink" title="运算符相关："></a>运算符相关：</h2><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><p>算法运算符</p><ul><li>加法 - 减法 * 乘法  &#x2F; 除法  % 取模 ** 指数  &#x2F;&#x2F; 整除</li></ul><p>运算符规则 数值运算可能改变结果的数据类型，类型的改变与运算符有关，有如下基本规则:整数和浮点数混合运算，输出结果是浮点数<br>整数之间运算，产生结果类型与操作符相关，除法运算的结果是浮点数 ;整数或浮点数与复数运算，输出结果是复数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一章：基础语法&quot;&gt;&lt;a href=&quot;#第一章：基础语法&quot; class=&quot;headerlink&quot; title=&quot;第一章：基础语法&quot;&gt;&lt;/a&gt;第一章：基础语法&lt;/h2&gt;&lt;p&gt;输出相关：&lt;/p&gt;
&lt;p&gt;基本输出案例&lt;/p&gt;
&lt;figure class=&quot;highlig</summary>
      
    
    
    
    <category term="python基础" scheme="https://jayuspider.cn/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="python基础" scheme="https://jayuspider.cn/tags/python%E5%9F%BA%E7%A1%80/"/>
    
    <category term="python" scheme="https://jayuspider.cn/tags/python/"/>
    
    <category term="爬虫" scheme="https://jayuspider.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
</feed>
