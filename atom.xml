<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JayYu🥤</title>
  
  
  <link href="https://jayuspider.cn/atom.xml" rel="self"/>
  
  <link href="https://jayuspider.cn/"/>
  <updated>2023-12-25T08:23:55.238Z</updated>
  <id>https://jayuspider.cn/</id>
  
  <author>
    <name>JayYu🥤</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python基础——列表01</title>
    <link href="https://jayuspider.cn/4a768a49b0af/"/>
    <id>https://jayuspider.cn/4a768a49b0af/</id>
    <published>2023-12-25T07:53:21.931Z</published>
    <updated>2023-12-25T08:23:55.238Z</updated>
    
    <content type="html"><![CDATA[<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>“列表（list）由一系列按特定顺序排列的元素组成。你不仅可以创建包含字母表中所有字母、数字 0～9 或所有家庭成员姓名的列表，还可以将任何东西加入列表，其中的元素之间可以没有任何关系。列表通常包含多个元素，因此给列表指定一个表示复数的名称（如 letters、digits 或 names）是个不错的主意。<br>在 Python 中，用方括号（[]）表示列表，用逗号分隔其中的元素。下面是一个简单的示例，其中包含几种自行车：<br>”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles)</span><br></pre></td></tr></table></figure><p>如果让 Python 将列表打印出来，Python 将打印列表的内部表示，包括方括号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br></pre></td></tr></table></figure><p>鉴于这不是你要让用户看到的输出，下面来学习如何访问列表元素。</p><h2 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h2><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p>列表是有序集合，因此要访问列表的任何元素，只需将该元素的位置（索引）告诉 Python 即可。要访问列表元素，可指出列表的名称，再指出元素的索引，并将后者放在方括号内。<br>例如，下面的代码从列表 bicycles 中提取第一款自行车：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>当你请求获取列表元素时，Python 只返回该元素，而不包括方括号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trek</span><br></pre></td></tr></table></figure><p>这正是你要让用户看到的结果——整洁、干净的输出。<br>你还可以对任意列表元素调用第 2 章介绍的字符串方法。例如，可使用 title() 方法让元素 ‘trek’ 的格式更标准：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>].title())</span><br></pre></td></tr></table></figure><p>这个示例的输出与前一个示例相同，只是首字母 T 是大写的。</p><h2 id="索引从-0-而不是-1-开始"><a href="#索引从-0-而不是-1-开始" class="headerlink" title="索引从 0 而不是 1 开始"></a>索引从 0 而不是 1 开始</h2><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><p>在 Python 中，第一个列表元素的索引为 0，而不是 1。大多数编程语言是如此规定的，这与列表操作的底层实现有关<br>第二个列表元素的索引为 1。根据这种简单的计数方式，要访问列表的任何元素，都可将其位置减 1，并将结果作为索引。例如，要访问第四个列表元素，可使用索引 3。<br>下面的代码访问索引 1 和索引 3 处的自行车：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>这些代码返回列表中的第二个和第四个元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cannondale</span><br><span class="line">specialized</span><br></pre></td></tr></table></figure><p>Python 为访问最后一个列表元素提供了一种特殊语法。通过将索引指定为 -1，可让 Python 返回最后一个列表元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicyles[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>这些代码返回 ‘specialized’。这种语法很有用，因为你经常需要在不知道列表长度的情况下访问最后的元素。<br>这种约定也适用于其他负数索引，例如，索引 -2 返回倒数第二个列表元素，索引 -3 返回倒数第三个列表元素，依此类推。</p><h2 id="使用列表中的各个值"><a href="#使用列表中的各个值" class="headerlink" title="使用列表中的各个值"></a>使用列表中的各个值</h2><h3 id="-3"><a href="#-3" class="headerlink" title=""></a></h3><p>你可以像使用其他变量一样使用列表中的各个值。例如，可以使用 f 字符串根据列表中的值来创建消息。<br>下面尝试从列表中提取第一款自行车，并使用这个值创建一条消息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [<span class="string">&#x27;trek&#x27;</span>, <span class="string">&#x27;cannondale&#x27;</span>, <span class="string">&#x27;redline&#x27;</span>, <span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line">message = <span class="string">f&quot;My first bicycle was a <span class="subst">&#123;bicycles[<span class="number">0</span>].title()&#125;</span>.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><p>这里使用 bicycles[0] 的值生成了一个句子，并将其赋给变量 message。输出是一个简单的句子，其中包含列表中的第一款自行车：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My first bicycle was a Trek.</span><br></pre></td></tr></table></figure><h2 id="修改列表元素"><a href="#修改列表元素" class="headerlink" title="修改列表元素"></a>修改列表元素</h2><h3 id="-4"><a href="#-4" class="headerlink" title=""></a></h3><p>修改列表元素的语法与访问列表元素的语法类似。要修改列表元素，可指定列表名和要修改的元素的索引，再指定该元素的新值。<br>假设有一个摩托车列表，其中的第一个元素为 ‘honda’，那么可在创建列表后修改这个元素的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line">motorcycles[<span class="number">0</span>] = <span class="string">&#x27;ducati&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure><p>首先定义列表 motorcycles，其中的第一个元素为 ‘honda’。接下来，将第一个元素的值改为 ‘ducati’。<br>输出表明，第一个元素的值变了，但其他列表元素的值没变：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span><br><span class="line">[&#x27;ducati&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span><br></pre></td></tr></table></figure><p>你可以修改任意列表元素的值，而不只是第一个元素的值。</p><h2 id="在列表中添加元素"><a href="#在列表中添加元素" class="headerlink" title="在列表中添加元素"></a>在列表中添加元素</h2><h3 id="在列表末尾添加元素"><a href="#在列表末尾添加元素" class="headerlink" title="在列表末尾添加元素"></a>在列表末尾添加元素</h3><p>在列表中添加新元素时，最简单的方式是将元素追加（append）到列表末尾。继续使用前一个示例中的列表，在其末尾添加新元素 ‘ducati’：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span><br><span class="line">print(motorcycles)</span><br><span class="line"></span><br><span class="line">motorcycles.append(&#x27;ducati&#x27;)</span><br><span class="line">print(motorcycles)</span><br></pre></td></tr></table></figure><p>append() 方法将元素 ‘ducati’ 添加到列表末尾，而不影响列表中的其他所有元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span><br><span class="line">[&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;, &#x27;ducati&#x27;]</span><br></pre></td></tr></table></figure><p>append() 方法让动态地创建列表易如反掌。例如，你可以先创建一个空列表，再使用一系列函数调用 append() 添加元素。<br>下面来创建一个空列表，再在其中添加元素 ‘honda’、’yamaha’ 和 ‘suzuki’：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">motorcycles = []</span><br><span class="line"></span><br><span class="line">motorcycles.append(&#x27;honda&#x27;)</span><br><span class="line">motorcycles.append(&#x27;yamaha&#x27;)</span><br><span class="line">motorcycles.append(&#x27;suzuki&#x27;)</span><br><span class="line"></span><br><span class="line">print(motorcycles)</span><br></pre></td></tr></table></figure><p>最终的列表与前述示例中的列表完全相同：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span><br></pre></td></tr></table></figure><p>这种创建列表的方式极其常见，因为经常要等程序运行后，你才知道用户要在程序中存储哪些数据。<br>为了便于管理，可首先创建一个空列表， 用于存储用户将要输入的值，然后将用户提供的每个新值追加到列表末尾。</p><h2 id="在列表中插入元素"><a href="#在列表中插入元素" class="headerlink" title="在列表中插入元素"></a>在列表中插入元素</h2><h3 id="-5"><a href="#-5" class="headerlink" title=""></a></h3><p>使用 insert() 方法可在列表的任意位置添加新元素。为此，需要指定新元素的索引和值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">motorcycles = [&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span><br><span class="line"></span><br><span class="line">motorcycles.insert(0, &#x27;ducati&#x27;)</span><br><span class="line">print(motorcycles)</span><br></pre></td></tr></table></figure><p>在这个示例中，值 ‘ducati’ 被插入到了列表开头。insert() 方法在索引 0 处添加空间，并将值 ‘ducati’ 存储到这个地方：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;ducati&#x27;, &#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span><br></pre></td></tr></table></figure><p>这种操作将列表中的每个既有元素都右移一个位置。</p><h3 id="累了，下期再继续—Waiting"><a href="#累了，下期再继续—Waiting" class="headerlink" title="累了，下期再继续—Waiting"></a>累了，下期再继续—Waiting</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h2&gt;&lt;h3 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;“列表（list）由一</summary>
      
    
    
    
    <category term="python基础" scheme="https://jayuspider.cn/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="python基础" scheme="https://jayuspider.cn/tags/python%E5%9F%BA%E7%A1%80/"/>
    
    <category term="列表" scheme="https://jayuspider.cn/tags/%E5%88%97%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>python基础——变量与数据类型</title>
    <link href="https://jayuspider.cn/71dd4825c55a/"/>
    <id>https://jayuspider.cn/71dd4825c55a/</id>
    <published>2023-12-25T07:21:26.974Z</published>
    <updated>2023-12-25T08:23:55.235Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章：基础语法"><a href="#第一章：基础语法" class="headerlink" title="第一章：基础语法"></a>第一章：基础语法</h2><p>输出相关：</p><p>基本输出案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;HelloWorld&quot;</span>)</span><br></pre></td></tr></table></figure><p>HelloWorld</p><p>转义字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ name = <span class="string">&#x27;c:\\user&#x27;</span></span><br></pre></td></tr></table></figure><p>x &#x3D; ‘路径c:\user’</p><p>y &#x3D; r”路径c:\user”</p><p>z &#x3D; f”路径{name}”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">print</span>(x,<span class="string">&quot;\n&quot;</span>,y,<span class="string">&quot;\n&quot;</span>,z)</span><br></pre></td></tr></table></figure><p>路径c:\user </p><p>占位符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">17</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的年龄是：%d岁&quot;</span>%age)</span><br></pre></td></tr></table></figure><p>我的年龄是：17岁</p><p>间隔符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;www&quot;</span>, <span class="string">&quot;baidu&quot;</span>, <span class="string">&quot;com&quot;</span>, sep = <span class="string">&quot;.&quot;</span>)</span><br></pre></td></tr></table></figure><p><a href="http://www.baidu.com/">www.baidu.com</a></p><p>控制符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>, end = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;world&quot;</span>)</span><br></pre></td></tr></table></figure><p>helloworld</p><p>连接符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;World&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span> + name)</span><br></pre></td></tr></table></figure><p>HelloWorld</p><p>复制符</p><p>count &#x3D; “num “</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">print</span>(count*<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>num num num </p><p>进制转换<br>x &#x3D; 100</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(x)) <span class="comment">#转换为二进制</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">oct</span>(x)) <span class="comment">#转换为八进制</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(x)) <span class="comment">#转换为16进制</span></span><br></pre></td></tr></table></figure><p>0b1100100</p><p>0o144</p><p>0x64</p><p>去除&#x2F;替换指定字符</p><p>a &#x3D; “abcd”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a.strip(<span class="string">&quot;dc&quot;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a.replace(<span class="string">&#x27;ab&#x27;</span>,<span class="string">&#x27;-&#x27;</span>))</span><br></pre></td></tr></table></figure><p>ab<br>-cd</p><p>切割字符串<br>a &#x3D; “ab_cd”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a.split(<span class="string">&quot;_&quot;</span>)[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a.split(<span class="string">&quot;_&quot;</span>)[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>ab<br>cd</p><p>format<br>x &#x3D; “我是{name}，今年{age}”.format(name &#x3D; ‘cjl’, age &#x3D; 18)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p>我是cjl，今年18</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>输入相关：</p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p>基础输入案例<br>password &#x3D; input(“请输入密码：”)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你输入的密码是：&quot;</span>, password)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(password))</span><br></pre></td></tr></table></figure><p>请输入密码：666</p><p>你输入的密码是： 666</p><p>&lt;class ‘str’&gt;</p><p>input默认输入后的类型为字符串<br>输入后类型强转<br>password &#x3D; int(input(“请输入密码：”))</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你输入的密码是：&quot;</span>, password)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(password))</span><br></pre></td></tr></table></figure><p>请输入密码：666<br>你输入的密码是： 666<br>&lt;class ‘int’&gt;</p><h2 id="运算符相关："><a href="#运算符相关：" class="headerlink" title="运算符相关："></a>运算符相关：</h2><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><p>算法运算符</p><ul><li>加法 - 减法 * 乘法  &#x2F; 除法  % 取模 ** 指数  &#x2F;&#x2F; 整除</li></ul><p>运算符规则 数值运算可能改变结果的数据类型，类型的改变与运算符有关，有如下基本规则:整数和浮点数混合运算，输出结果是浮点数<br>整数之间运算，产生结果类型与操作符相关，除法运算的结果是浮点数 ;整数或浮点数与复数运算，输出结果是复数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一章：基础语法&quot;&gt;&lt;a href=&quot;#第一章：基础语法&quot; class=&quot;headerlink&quot; title=&quot;第一章：基础语法&quot;&gt;&lt;/a&gt;第一章：基础语法&lt;/h2&gt;&lt;p&gt;输出相关：&lt;/p&gt;
&lt;p&gt;基本输出案例&lt;/p&gt;
&lt;figure class=&quot;highlig</summary>
      
    
    
    
    <category term="python基础" scheme="https://jayuspider.cn/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="python基础" scheme="https://jayuspider.cn/tags/python%E5%9F%BA%E7%A1%80/"/>
    
    <category term="python" scheme="https://jayuspider.cn/tags/python/"/>
    
    <category term="爬虫" scheme="https://jayuspider.cn/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
</feed>
